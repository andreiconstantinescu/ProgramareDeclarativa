type token =
  | INT_CAST
  | FLOAT_CAST
  | INT of (int)
  | FLOAT of (float)
  | VAR of (string)
  | R_INT
  | P_INT
  | TRUE
  | FALSE
  | SEQ
  | SKIP
  | IF
  | THEN
  | ELSE
  | WHILE
  | DO
  | DONE
  | FOR
  | LT
  | LTE
  | EQ
  | ASGNOP
  | DEREF
  | WHEN
  | PLUS
  | MINUS
  | MUL
  | DIV
  | LPAREN
  | RPAREN
  | FUN
  | COLON
  | LET
  | REC
  | IN
  | REF
  | TINT
  | TBOOL
  | TUNIT
  | TFLOAT
  | ARROW
  | EOF

open Parsing;;
# 2 "parser.mly"

(* Open is used for importing another module. 
   Each file is organized as a module with the module name being the
   file name without extension where the first letter is capitalized
*)
open ImpAST  (* refer to definitions from ImpAST directly *)
open Lexing  (* Lexing is a predefined library used for lexing *)

(* Formats a string describing the location of the production being currently 
   parsed *)
let location () =  let start_pos = Parsing.symbol_start_pos () in
    let end_pos = Parsing.symbol_end_pos () in
    (start_pos.pos_fname,start_pos.pos_lnum, start_pos.pos_cnum - start_pos.pos_bol, end_pos.pos_lnum, end_pos.pos_cnum - end_pos.pos_bol)

(* Throws a ParseError with the specified location*)
let parseError loc = raise (Lexer.ParseError loc)

# 65 "parser.ml"
let yytransl_const = [|
  257 (* INT_CAST *);
  258 (* FLOAT_CAST *);
  262 (* R_INT *);
  263 (* P_INT *);
  264 (* TRUE *);
  265 (* FALSE *);
  266 (* SEQ *);
  267 (* SKIP *);
  268 (* IF *);
  269 (* THEN *);
  270 (* ELSE *);
  271 (* WHILE *);
  272 (* DO *);
  273 (* DONE *);
  274 (* FOR *);
  275 (* LT *);
  276 (* LTE *);
  277 (* EQ *);
  278 (* ASGNOP *);
  279 (* DEREF *);
  280 (* WHEN *);
  281 (* PLUS *);
  282 (* MINUS *);
  283 (* MUL *);
  284 (* DIV *);
  285 (* LPAREN *);
  286 (* RPAREN *);
  287 (* FUN *);
  288 (* COLON *);
  289 (* LET *);
  290 (* REC *);
  291 (* IN *);
  292 (* REF *);
  293 (* TINT *);
  294 (* TBOOL *);
  295 (* TUNIT *);
  296 (* TFLOAT *);
  297 (* ARROW *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  259 (* INT *);
  260 (* FLOAT *);
  261 (* VAR *);
    0|]

let yylhs = "\255\255\
\001\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\000\000"

let yylen = "\002\000\
\002\000\001\000\001\000\001\000\001\000\003\000\003\000\002\000\
\003\000\003\000\003\000\003\000\003\000\005\000\003\000\003\000\
\003\000\002\000\006\000\005\000\009\000\008\000\009\000\006\000\
\002\000\001\000\001\000\001\000\002\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\003\000\002\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\027\000\035\000\036\000\028\000\030\000\034\000\
\000\000\000\000\031\000\032\000\033\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\040\000\000\000\026\000\
\029\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\001\000\025\000\000\000\000\000\000\000\
\037\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\020\000\000\000\000\000\002\000\
\003\000\004\000\005\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\008\000\000\000\000\000\000\000\000\000\
\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000"

let yydgoto = "\002\000\
\022\000\023\000\076\000\024\000"

let yysindex = "\003\000\
\136\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\252\254\136\255\000\000\000\000\000\000\136\255\136\255\242\254\
\136\255\136\255\254\254\251\254\136\255\000\000\001\000\000\000\
\000\000\051\002\183\255\076\001\136\255\014\255\105\001\009\255\
\007\255\034\255\014\255\136\255\136\255\136\255\136\255\136\255\
\136\255\136\255\136\255\000\000\000\000\136\255\136\255\080\002\
\000\000\008\255\136\255\012\255\051\002\167\002\167\002\212\255\
\196\002\196\002\048\255\048\255\141\001\170\001\136\255\072\255\
\199\001\072\255\136\255\136\255\000\000\109\002\072\255\000\000\
\000\000\000\000\000\000\084\255\136\255\241\254\051\002\138\002\
\136\255\086\255\004\255\000\000\072\255\051\002\136\255\235\001\
\000\000\136\255\223\254\015\002\136\255\051\002\136\255\138\002\
\051\002"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\231\000\000\000\000\000\000\000\030\000\000\000\000\000\
\000\000\000\000\060\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\246\000\183\000\198\000\175\000\
\129\000\152\000\083\000\106\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\255\000\207\000\
\000\000\000\000\000\000\000\000\000\000\014\001\000\000\000\000\
\000\000\000\000\237\254\000\000\000\000\034\001\000\000\222\000\
\059\001"

let yygindex = "\000\000\
\000\000\251\255\004\000\038\000"

let yytablesize = 1000
let yytable = "\033\000\
\044\000\006\000\084\000\001\000\026\000\087\000\025\000\085\000\
\027\000\028\000\006\000\030\000\031\000\050\000\029\000\035\000\
\006\000\007\000\008\000\009\000\084\000\011\000\012\000\048\000\
\013\000\085\000\032\000\051\000\034\000\038\000\053\000\054\000\
\055\000\056\000\057\000\058\000\059\000\060\000\052\000\064\000\
\061\000\062\000\018\000\066\000\090\000\065\000\000\000\000\000\
\004\000\005\000\006\000\007\000\008\000\009\000\000\000\011\000\
\012\000\070\000\013\000\039\000\045\000\079\000\080\000\045\000\
\045\000\045\000\000\000\045\000\045\000\078\000\017\000\086\000\
\045\000\000\000\082\000\088\000\018\000\000\000\000\000\000\000\
\000\000\092\000\011\000\021\000\094\000\045\000\000\000\096\000\
\091\000\097\000\045\000\045\000\045\000\045\000\045\000\045\000\
\045\000\045\000\045\000\045\000\071\000\000\000\045\000\000\000\
\000\000\012\000\000\000\045\000\072\000\073\000\074\000\075\000\
\000\000\083\000\000\000\089\000\045\000\045\000\000\000\084\000\
\000\000\084\000\000\000\045\000\085\000\045\000\085\000\000\000\
\009\000\045\000\000\000\045\000\000\000\045\000\045\000\003\000\
\004\000\005\000\006\000\007\000\008\000\009\000\010\000\011\000\
\012\000\000\000\013\000\014\000\000\000\000\000\015\000\010\000\
\000\000\016\000\000\000\000\000\000\000\000\000\017\000\000\000\
\000\000\000\000\000\000\000\000\018\000\000\000\019\000\000\000\
\020\000\000\000\000\000\021\000\000\000\000\000\013\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\016\000\004\000\
\005\000\006\000\007\000\008\000\009\000\000\000\011\000\012\000\
\036\000\013\000\000\000\046\000\000\000\015\000\000\000\000\000\
\000\000\037\000\038\000\000\000\039\000\017\000\019\000\040\000\
\041\000\042\000\043\000\018\000\004\000\005\000\006\000\007\000\
\008\000\009\000\021\000\011\000\012\000\021\000\013\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\018\000\000\000\
\000\000\039\000\017\000\067\000\040\000\041\000\042\000\043\000\
\018\000\000\000\000\000\000\000\000\000\017\000\000\000\021\000\
\000\000\000\000\000\000\000\000\000\000\000\000\014\000\000\000\
\000\000\004\000\005\000\006\000\007\000\008\000\009\000\000\000\
\011\000\012\000\036\000\013\000\000\000\024\000\000\000\000\000\
\000\000\000\000\000\000\037\000\038\000\000\000\039\000\017\000\
\000\000\040\000\041\000\042\000\043\000\018\000\038\000\038\000\
\000\000\022\000\000\000\000\000\021\000\000\000\000\000\038\000\
\000\000\000\000\038\000\038\000\000\000\038\000\038\000\000\000\
\038\000\038\000\000\000\038\000\000\000\038\000\038\000\038\000\
\038\000\038\000\023\000\038\000\039\000\039\000\000\000\000\000\
\038\000\000\000\000\000\000\000\000\000\039\000\000\000\000\000\
\039\000\039\000\000\000\039\000\039\000\000\000\039\000\039\000\
\000\000\039\000\000\000\039\000\039\000\039\000\039\000\039\000\
\000\000\039\000\000\000\000\000\011\000\000\000\039\000\011\000\
\011\000\000\000\011\000\011\000\000\000\011\000\011\000\000\000\
\011\000\000\000\011\000\011\000\011\000\011\000\011\000\000\000\
\011\000\000\000\000\000\012\000\000\000\011\000\012\000\012\000\
\000\000\012\000\012\000\000\000\012\000\012\000\000\000\012\000\
\000\000\012\000\012\000\012\000\012\000\012\000\000\000\012\000\
\000\000\000\000\009\000\000\000\012\000\009\000\009\000\000\000\
\009\000\009\000\000\000\009\000\009\000\000\000\009\000\000\000\
\009\000\009\000\009\000\000\000\000\000\000\000\009\000\000\000\
\000\000\010\000\000\000\009\000\010\000\010\000\000\000\010\000\
\010\000\000\000\010\000\010\000\000\000\010\000\000\000\010\000\
\010\000\010\000\000\000\000\000\000\000\010\000\000\000\000\000\
\013\000\000\000\010\000\013\000\013\000\000\000\013\000\013\000\
\016\000\013\000\013\000\016\000\016\000\000\000\016\000\016\000\
\000\000\000\000\000\000\000\000\013\000\000\000\016\000\015\000\
\000\000\013\000\015\000\015\000\016\000\015\000\015\000\000\000\
\019\000\016\000\000\000\019\000\019\000\015\000\019\000\019\000\
\000\000\000\000\000\000\015\000\000\000\000\000\019\000\021\000\
\015\000\000\000\021\000\021\000\019\000\021\000\021\000\000\000\
\000\000\019\000\000\000\018\000\018\000\021\000\018\000\018\000\
\000\000\000\000\000\000\021\000\000\000\000\000\018\000\000\000\
\021\000\000\000\017\000\017\000\018\000\017\000\017\000\000\000\
\000\000\018\000\000\000\014\000\014\000\017\000\014\000\014\000\
\000\000\000\000\000\000\017\000\000\000\000\000\014\000\000\000\
\017\000\000\000\024\000\024\000\014\000\024\000\024\000\000\000\
\000\000\014\000\000\000\000\000\000\000\024\000\000\000\000\000\
\000\000\000\000\000\000\024\000\000\000\000\000\022\000\022\000\
\024\000\022\000\022\000\000\000\000\000\000\000\000\000\000\000\
\000\000\022\000\000\000\000\000\000\000\000\000\000\000\022\000\
\000\000\000\000\000\000\000\000\022\000\000\000\000\000\023\000\
\023\000\000\000\023\000\023\000\004\000\005\000\006\000\007\000\
\008\000\009\000\023\000\011\000\012\000\036\000\013\000\000\000\
\023\000\000\000\000\000\047\000\000\000\023\000\037\000\038\000\
\000\000\039\000\017\000\000\000\040\000\041\000\042\000\043\000\
\018\000\004\000\005\000\006\000\007\000\008\000\009\000\021\000\
\011\000\012\000\036\000\013\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\037\000\038\000\000\000\039\000\017\000\
\000\000\040\000\041\000\042\000\043\000\018\000\049\000\000\000\
\000\000\000\000\000\000\000\000\021\000\004\000\005\000\006\000\
\007\000\008\000\009\000\000\000\011\000\012\000\036\000\013\000\
\000\000\000\000\068\000\000\000\000\000\000\000\000\000\037\000\
\038\000\000\000\039\000\017\000\000\000\040\000\041\000\042\000\
\043\000\018\000\004\000\005\000\006\000\007\000\008\000\009\000\
\021\000\011\000\012\000\036\000\013\000\000\000\000\000\000\000\
\000\000\000\000\069\000\000\000\037\000\038\000\000\000\039\000\
\017\000\000\000\040\000\041\000\042\000\043\000\018\000\004\000\
\005\000\006\000\007\000\008\000\009\000\021\000\011\000\012\000\
\036\000\013\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\037\000\038\000\000\000\039\000\017\000\000\000\040\000\
\041\000\042\000\043\000\018\000\000\000\000\000\000\000\000\000\
\000\000\077\000\021\000\004\000\005\000\006\000\007\000\008\000\
\009\000\000\000\011\000\012\000\036\000\013\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\037\000\038\000\000\000\
\039\000\017\000\000\000\040\000\041\000\042\000\043\000\018\000\
\093\000\000\000\000\000\000\000\000\000\000\000\021\000\004\000\
\005\000\006\000\007\000\008\000\009\000\000\000\011\000\012\000\
\036\000\013\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\037\000\038\000\000\000\039\000\017\000\000\000\040\000\
\041\000\042\000\043\000\018\000\000\000\000\000\000\000\000\000\
\000\000\095\000\021\000\004\000\005\000\006\000\007\000\008\000\
\009\000\000\000\011\000\012\000\036\000\013\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\037\000\038\000\000\000\
\039\000\017\000\000\000\040\000\041\000\042\000\043\000\018\000\
\004\000\005\000\006\000\007\000\008\000\009\000\021\000\011\000\
\012\000\063\000\013\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\037\000\038\000\000\000\039\000\017\000\000\000\
\040\000\041\000\042\000\043\000\018\000\004\000\005\000\006\000\
\007\000\008\000\009\000\021\000\011\000\012\000\081\000\013\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\037\000\
\038\000\000\000\039\000\017\000\000\000\040\000\041\000\042\000\
\043\000\018\000\004\000\005\000\006\000\007\000\008\000\009\000\
\021\000\011\000\012\000\000\000\013\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\037\000\038\000\000\000\039\000\
\017\000\000\000\040\000\041\000\042\000\043\000\018\000\004\000\
\005\000\006\000\007\000\008\000\009\000\021\000\011\000\012\000\
\000\000\013\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\039\000\017\000\000\000\040\000\
\041\000\042\000\043\000\018\000\004\000\005\000\006\000\007\000\
\008\000\009\000\021\000\011\000\012\000\000\000\013\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\017\000\000\000\000\000\000\000\042\000\043\000\
\018\000\000\000\000\000\000\000\000\000\000\000\000\000\021\000"

let yycheck = "\005\001\
\000\000\021\001\036\001\001\000\010\000\021\001\011\001\041\001\
\014\000\015\000\030\001\017\000\018\000\005\001\029\001\021\000\
\003\001\004\001\005\001\006\001\036\001\008\001\009\001\029\000\
\011\001\041\001\029\001\021\001\034\001\000\000\036\000\037\000\
\038\000\039\000\040\000\041\000\042\000\043\000\005\001\032\001\
\046\000\047\000\029\001\032\001\041\001\051\000\255\255\255\255\
\001\001\002\001\003\001\004\001\005\001\006\001\255\255\008\001\
\009\001\063\000\011\001\000\000\023\000\067\000\068\000\026\000\
\027\000\028\000\255\255\030\000\031\000\066\000\023\001\077\000\
\035\000\255\255\071\000\081\000\029\001\255\255\255\255\255\255\
\255\255\087\000\000\000\036\001\090\000\048\000\255\255\093\000\
\085\000\095\000\053\000\054\000\055\000\056\000\057\000\058\000\
\059\000\060\000\061\000\062\000\029\001\255\255\065\000\255\255\
\255\255\000\000\255\255\070\000\037\001\038\001\039\001\040\001\
\255\255\030\001\255\255\030\001\079\000\080\000\255\255\036\001\
\255\255\036\001\255\255\086\000\041\001\088\000\041\001\255\255\
\000\000\092\000\255\255\094\000\255\255\096\000\097\000\000\001\
\001\001\002\001\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\255\255\011\001\012\001\255\255\255\255\015\001\000\000\
\255\255\018\001\255\255\255\255\255\255\255\255\023\001\255\255\
\255\255\255\255\255\255\255\255\029\001\255\255\031\001\255\255\
\033\001\255\255\255\255\036\001\255\255\255\255\000\000\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\000\000\001\001\
\002\001\003\001\004\001\005\001\006\001\255\255\008\001\009\001\
\010\001\011\001\255\255\013\001\255\255\000\000\255\255\255\255\
\255\255\019\001\020\001\255\255\022\001\023\001\000\000\025\001\
\026\001\027\001\028\001\029\001\001\001\002\001\003\001\004\001\
\005\001\006\001\036\001\008\001\009\001\000\000\011\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
\255\255\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\255\255\255\255\255\255\255\255\000\000\255\255\036\001\
\255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
\255\255\001\001\002\001\003\001\004\001\005\001\006\001\255\255\
\008\001\009\001\010\001\011\001\255\255\000\000\255\255\255\255\
\255\255\255\255\255\255\019\001\020\001\255\255\022\001\023\001\
\255\255\025\001\026\001\027\001\028\001\029\001\001\001\002\001\
\255\255\000\000\255\255\255\255\036\001\255\255\255\255\010\001\
\255\255\255\255\013\001\014\001\255\255\016\001\017\001\255\255\
\019\001\020\001\255\255\022\001\255\255\024\001\025\001\026\001\
\027\001\028\001\000\000\030\001\001\001\002\001\255\255\255\255\
\035\001\255\255\255\255\255\255\255\255\010\001\255\255\255\255\
\013\001\014\001\255\255\016\001\017\001\255\255\019\001\020\001\
\255\255\022\001\255\255\024\001\025\001\026\001\027\001\028\001\
\255\255\030\001\255\255\255\255\010\001\255\255\035\001\013\001\
\014\001\255\255\016\001\017\001\255\255\019\001\020\001\255\255\
\022\001\255\255\024\001\025\001\026\001\027\001\028\001\255\255\
\030\001\255\255\255\255\010\001\255\255\035\001\013\001\014\001\
\255\255\016\001\017\001\255\255\019\001\020\001\255\255\022\001\
\255\255\024\001\025\001\026\001\027\001\028\001\255\255\030\001\
\255\255\255\255\010\001\255\255\035\001\013\001\014\001\255\255\
\016\001\017\001\255\255\019\001\020\001\255\255\022\001\255\255\
\024\001\025\001\026\001\255\255\255\255\255\255\030\001\255\255\
\255\255\010\001\255\255\035\001\013\001\014\001\255\255\016\001\
\017\001\255\255\019\001\020\001\255\255\022\001\255\255\024\001\
\025\001\026\001\255\255\255\255\255\255\030\001\255\255\255\255\
\010\001\255\255\035\001\013\001\014\001\255\255\016\001\017\001\
\010\001\019\001\020\001\013\001\014\001\255\255\016\001\017\001\
\255\255\255\255\255\255\255\255\030\001\255\255\024\001\010\001\
\255\255\035\001\013\001\014\001\030\001\016\001\017\001\255\255\
\010\001\035\001\255\255\013\001\014\001\024\001\016\001\017\001\
\255\255\255\255\255\255\030\001\255\255\255\255\024\001\010\001\
\035\001\255\255\013\001\014\001\030\001\016\001\017\001\255\255\
\255\255\035\001\255\255\013\001\014\001\024\001\016\001\017\001\
\255\255\255\255\255\255\030\001\255\255\255\255\024\001\255\255\
\035\001\255\255\013\001\014\001\030\001\016\001\017\001\255\255\
\255\255\035\001\255\255\013\001\014\001\024\001\016\001\017\001\
\255\255\255\255\255\255\030\001\255\255\255\255\024\001\255\255\
\035\001\255\255\013\001\014\001\030\001\016\001\017\001\255\255\
\255\255\035\001\255\255\255\255\255\255\024\001\255\255\255\255\
\255\255\255\255\255\255\030\001\255\255\255\255\013\001\014\001\
\035\001\016\001\017\001\255\255\255\255\255\255\255\255\255\255\
\255\255\024\001\255\255\255\255\255\255\255\255\255\255\030\001\
\255\255\255\255\255\255\255\255\035\001\255\255\255\255\013\001\
\014\001\255\255\016\001\017\001\001\001\002\001\003\001\004\001\
\005\001\006\001\024\001\008\001\009\001\010\001\011\001\255\255\
\030\001\255\255\255\255\016\001\255\255\035\001\019\001\020\001\
\255\255\022\001\023\001\255\255\025\001\026\001\027\001\028\001\
\029\001\001\001\002\001\003\001\004\001\005\001\006\001\036\001\
\008\001\009\001\010\001\011\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\019\001\020\001\255\255\022\001\023\001\
\255\255\025\001\026\001\027\001\028\001\029\001\030\001\255\255\
\255\255\255\255\255\255\255\255\036\001\001\001\002\001\003\001\
\004\001\005\001\006\001\255\255\008\001\009\001\010\001\011\001\
\255\255\255\255\014\001\255\255\255\255\255\255\255\255\019\001\
\020\001\255\255\022\001\023\001\255\255\025\001\026\001\027\001\
\028\001\029\001\001\001\002\001\003\001\004\001\005\001\006\001\
\036\001\008\001\009\001\010\001\011\001\255\255\255\255\255\255\
\255\255\255\255\017\001\255\255\019\001\020\001\255\255\022\001\
\023\001\255\255\025\001\026\001\027\001\028\001\029\001\001\001\
\002\001\003\001\004\001\005\001\006\001\036\001\008\001\009\001\
\010\001\011\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\019\001\020\001\255\255\022\001\023\001\255\255\025\001\
\026\001\027\001\028\001\029\001\255\255\255\255\255\255\255\255\
\255\255\035\001\036\001\001\001\002\001\003\001\004\001\005\001\
\006\001\255\255\008\001\009\001\010\001\011\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\019\001\020\001\255\255\
\022\001\023\001\255\255\025\001\026\001\027\001\028\001\029\001\
\030\001\255\255\255\255\255\255\255\255\255\255\036\001\001\001\
\002\001\003\001\004\001\005\001\006\001\255\255\008\001\009\001\
\010\001\011\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\019\001\020\001\255\255\022\001\023\001\255\255\025\001\
\026\001\027\001\028\001\029\001\255\255\255\255\255\255\255\255\
\255\255\035\001\036\001\001\001\002\001\003\001\004\001\005\001\
\006\001\255\255\008\001\009\001\010\001\011\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\019\001\020\001\255\255\
\022\001\023\001\255\255\025\001\026\001\027\001\028\001\029\001\
\001\001\002\001\003\001\004\001\005\001\006\001\036\001\008\001\
\009\001\010\001\011\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\019\001\020\001\255\255\022\001\023\001\255\255\
\025\001\026\001\027\001\028\001\029\001\001\001\002\001\003\001\
\004\001\005\001\006\001\036\001\008\001\009\001\010\001\011\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\019\001\
\020\001\255\255\022\001\023\001\255\255\025\001\026\001\027\001\
\028\001\029\001\001\001\002\001\003\001\004\001\005\001\006\001\
\036\001\008\001\009\001\255\255\011\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\019\001\020\001\255\255\022\001\
\023\001\255\255\025\001\026\001\027\001\028\001\029\001\001\001\
\002\001\003\001\004\001\005\001\006\001\036\001\008\001\009\001\
\255\255\011\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\022\001\023\001\255\255\025\001\
\026\001\027\001\028\001\029\001\001\001\002\001\003\001\004\001\
\005\001\006\001\036\001\008\001\009\001\255\255\011\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\023\001\255\255\255\255\255\255\027\001\028\001\
\029\001\255\255\255\255\255\255\255\255\255\255\255\255\036\001"

let yynames_const = "\
  INT_CAST\000\
  FLOAT_CAST\000\
  R_INT\000\
  P_INT\000\
  TRUE\000\
  FALSE\000\
  SEQ\000\
  SKIP\000\
  IF\000\
  THEN\000\
  ELSE\000\
  WHILE\000\
  DO\000\
  DONE\000\
  FOR\000\
  LT\000\
  LTE\000\
  EQ\000\
  ASGNOP\000\
  DEREF\000\
  WHEN\000\
  PLUS\000\
  MINUS\000\
  MUL\000\
  DIV\000\
  LPAREN\000\
  RPAREN\000\
  FUN\000\
  COLON\000\
  LET\000\
  REC\000\
  IN\000\
  REF\000\
  TINT\000\
  TBOOL\000\
  TUNIT\000\
  TFLOAT\000\
  ARROW\000\
  EOF\000\
  "

let yynames_block = "\
  INT\000\
  FLOAT\000\
  VAR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 104 "parser.mly"
                            ( _1 )
# 489 "parser.ml"
               : ImpAST.expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 114 "parser.mly"
                               (TInt)
# 495 "parser.ml"
               : 'tip))
; (fun __caml_parser_env ->
    Obj.repr(
# 115 "parser.mly"
                               (TBool)
# 501 "parser.ml"
               : 'tip))
; (fun __caml_parser_env ->
    Obj.repr(
# 116 "parser.mly"
                               (TUnit)
# 507 "parser.ml"
               : 'tip))
; (fun __caml_parser_env ->
    Obj.repr(
# 117 "parser.mly"
                               (TFloat)
# 513 "parser.ml"
               : 'tip))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tip) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tip) in
    Obj.repr(
# 118 "parser.mly"
                               ( TArrow (_1, _3) )
# 521 "parser.ml"
               : 'tip))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tip) in
    Obj.repr(
# 123 "parser.mly"
                               ( _2 )
# 528 "parser.ml"
               : 'tip))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'tip) in
    Obj.repr(
# 124 "parser.mly"
                               ( TRef _1 )
# 535 "parser.ml"
               : 'tip))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 127 "parser.mly"
                               ( Op (_1,Plus,_3, location()) )
# 543 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 130 "parser.mly"
                                ( Op (_1,Minus,_3, location()) )
# 551 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 131 "parser.mly"
                              ( Op (_1,Mul,_3, location()) )
# 559 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 132 "parser.mly"
                              ( Op (_1,Div,_3, location()) )
# 567 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 133 "parser.mly"
                                ( Atrib (_1,_3, location()) )
# 575 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 134 "parser.mly"
                                ( AtribWhen (_1,_3,_5, location()) )
# 584 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 135 "parser.mly"
                               ( Op (_1, Mic, _3, location()) )
# 592 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 136 "parser.mly"
                              ( Op (_1, MicS, _3, location()) )
# 600 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 137 "parser.mly"
                               ( Secv (_1,_3, location()) )
# 608 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 138 "parser.mly"
                              ( PrintInt (_2, location()) )
# 615 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 140 "parser.mly"
                               ( If (_2, _4, _6, location()) )
# 624 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 158 "parser.mly"
                               ( While (_2, _4, location()) )
# 632 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 160 "parser.mly"
                               ( For (_3, _5, _7, _9, location()) )
# 642 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'tip) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 162 "parser.mly"
                               ( Fun (_3, _5, _8, location()) )
# 651 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'tip) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 164 "parser.mly"
                               ( LetRec (_3, _5, _7, _9, location()) )
# 661 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 166 "parser.mly"
                               ( Let (_2, _4, _6, location()) )
# 670 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'funexpr) in
    Obj.repr(
# 167 "parser.mly"
                               ( App (_1, _2, location()) )
# 678 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'funexpr) in
    Obj.repr(
# 171 "parser.mly"
                               ( _1 )
# 685 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 174 "parser.mly"
                               ( parseError (location ()) )
# 691 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 178 "parser.mly"
                               ( Int (_1,location()) )
# 698 "parser.ml"
               : 'funexpr))
; (fun __caml_parser_env ->
    Obj.repr(
# 179 "parser.mly"
                               ( ReadInt(location()) )
# 704 "parser.ml"
               : 'funexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 180 "parser.mly"
                               ( Float (_1,location()) )
# 711 "parser.ml"
               : 'funexpr))
; (fun __caml_parser_env ->
    Obj.repr(
# 181 "parser.mly"
                               ( Bool (true, location()) )
# 717 "parser.ml"
               : 'funexpr))
; (fun __caml_parser_env ->
    Obj.repr(
# 182 "parser.mly"
                               ( Bool (false, location()) )
# 723 "parser.ml"
               : 'funexpr))
; (fun __caml_parser_env ->
    Obj.repr(
# 183 "parser.mly"
                               ( Skip (location()) )
# 729 "parser.ml"
               : 'funexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 184 "parser.mly"
                               ( Var (_1,location()) )
# 736 "parser.ml"
               : 'funexpr))
; (fun __caml_parser_env ->
    Obj.repr(
# 185 "parser.mly"
                               ( IntOfFloat (location()) )
# 742 "parser.ml"
               : 'funexpr))
; (fun __caml_parser_env ->
    Obj.repr(
# 186 "parser.mly"
                               ( FloatOfInt (location()) )
# 748 "parser.ml"
               : 'funexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 187 "parser.mly"
                               ( _2 )
# 755 "parser.ml"
               : 'funexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 191 "parser.mly"
                               ( Deref (_2, location()) )
# 762 "parser.ml"
               : 'funexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 192 "parser.mly"
                               ( Ref (_2, location()) )
# 769 "parser.ml"
               : 'funexpr))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : ImpAST.expr)
