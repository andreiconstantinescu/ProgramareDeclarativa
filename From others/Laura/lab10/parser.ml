type token =
  | Z
  | INT_CAST
  | FLOAT_CAST
  | INT of (int)
  | FLOAT of (float)
  | LOC of (string)
  | VAR of (string)
  | TRUE
  | FALSE
  | SEQ
  | SKIP
  | IF
  | THEN
  | ELSE
  | WHILE
  | DO
  | DONE
  | FOR
  | LT
  | LTE
  | EQ
  | ASGNOP
  | DEREF
  | PLUS
  | MINUS
  | MUL
  | DIV
  | LPAREN
  | RPAREN
  | FUN
  | COLON
  | TINT
  | TBOOL
  | TUNIT
  | TFLOAT
  | ARROW
  | FUNX
  | EOF
  | IN
  | LET
  | LETX

open Parsing;;
let _ = parse_error;;
# 3 "parser.mly"
open ImpAST
open Lexing

let location () =  let start_pos = Parsing.symbol_start_pos () in
    let end_pos = Parsing.symbol_end_pos () in
    Printf.sprintf "%s:%d.%d-%d.%d"
      start_pos.pos_fname
      start_pos.pos_lnum (start_pos.pos_cnum - start_pos.pos_bol)
      end_pos.pos_lnum (end_pos.pos_cnum - end_pos.pos_bol)

let parseError loc = raise (Lexer.ParseError loc)

# 60 "parser.ml"
let yytransl_const = [|
  257 (* Z *);
  258 (* INT_CAST *);
  259 (* FLOAT_CAST *);
  264 (* TRUE *);
  265 (* FALSE *);
  266 (* SEQ *);
  267 (* SKIP *);
  268 (* IF *);
  269 (* THEN *);
  270 (* ELSE *);
  271 (* WHILE *);
  272 (* DO *);
  273 (* DONE *);
  274 (* FOR *);
  275 (* LT *);
  276 (* LTE *);
  277 (* EQ *);
  278 (* ASGNOP *);
  279 (* DEREF *);
  280 (* PLUS *);
  281 (* MINUS *);
  282 (* MUL *);
  283 (* DIV *);
  284 (* LPAREN *);
  285 (* RPAREN *);
  286 (* FUN *);
  287 (* COLON *);
  288 (* TINT *);
  289 (* TBOOL *);
  290 (* TUNIT *);
  291 (* TFLOAT *);
  292 (* ARROW *);
  293 (* FUNX *);
    0 (* EOF *);
  294 (* IN *);
  295 (* LET *);
  296 (* LETX *);
    0|]

let yytransl_block = [|
  260 (* INT *);
  261 (* FLOAT *);
  262 (* LOC *);
  263 (* VAR *);
    0|]

let yylhs = "\255\255\
\001\000\003\000\003\000\003\000\003\000\003\000\003\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\000\000"

let yylen = "\002\000\
\002\000\001\000\001\000\001\000\001\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\006\000\
\005\000\009\000\008\000\002\000\001\000\008\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\003\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\023\000\032\000\030\000\031\000\024\000\025\000\
\000\000\029\000\026\000\027\000\028\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\035\000\000\000\021\000\000\000\
\000\000\000\000\000\000\034\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\001\000\020\000\
\000\000\000\000\000\000\000\000\033\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\002\000\003\000\004\000\005\000\000\000\
\000\000\017\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\007\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\021\000\022\000\064\000\023\000"

let yysindex = "\002\000\
\079\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\246\254\000\000\000\000\000\000\000\000\079\255\079\255\241\254\
\014\255\079\255\001\255\024\255\000\000\184\000\000\000\079\255\
\241\000\013\001\079\255\000\000\223\255\031\255\008\255\079\255\
\079\255\079\255\079\255\079\255\079\255\079\255\000\000\000\000\
\209\001\079\255\079\255\097\001\000\000\009\255\002\255\125\001\
\209\001\209\001\252\255\252\255\220\001\220\001\041\001\069\001\
\079\255\002\255\002\255\000\000\000\000\000\000\000\000\235\254\
\079\255\000\000\153\001\236\254\238\254\079\255\002\255\181\001\
\079\255\006\255\000\000\191\255\007\255\212\000\079\255\079\255\
\079\255\125\001\181\001\181\001"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\075\000\000\000\000\000\000\000\000\000\000\000\000\000\134\000\
\089\000\106\000\041\000\058\000\001\000\021\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\116\000\
\000\000\000\000\000\000\000\000\237\254\000\000\000\000\000\000\
\000\000\152\000\124\000\142\000"

let yygindex = "\000\000\
\000\000\246\255\204\255\107\000"

let yytablesize = 760
let yytable = "\070\000\
\010\000\006\000\001\000\025\000\026\000\068\000\069\000\029\000\
\074\000\006\000\075\000\024\000\027\000\041\000\071\000\071\000\
\044\000\071\000\077\000\028\000\011\000\048\000\049\000\050\000\
\051\000\052\000\053\000\054\000\030\000\059\000\031\000\055\000\
\056\000\060\000\061\000\062\000\063\000\046\000\047\000\058\000\
\008\000\079\000\071\000\000\000\000\000\000\000\067\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\072\000\000\000\
\000\000\009\000\000\000\076\000\000\000\000\000\078\000\000\000\
\000\000\000\000\000\000\000\000\082\000\083\000\084\000\000\000\
\000\000\000\000\012\000\000\000\000\000\000\000\003\000\004\000\
\005\000\006\000\007\000\008\000\009\000\010\000\011\000\012\000\
\014\000\013\000\014\000\000\000\000\000\015\000\000\000\000\000\
\016\000\000\000\000\000\000\000\000\000\017\000\000\000\000\000\
\000\000\013\000\018\000\000\000\019\000\000\000\000\000\000\000\
\000\000\000\000\000\000\016\000\000\000\020\000\000\000\000\000\
\000\000\000\000\000\000\022\000\000\000\000\000\000\000\000\000\
\040\000\000\000\000\000\040\000\040\000\015\000\000\000\040\000\
\000\000\000\000\000\000\000\000\000\000\018\000\000\000\000\000\
\000\000\000\000\000\000\040\000\000\000\000\000\040\000\019\000\
\000\000\000\000\040\000\040\000\040\000\040\000\040\000\040\000\
\040\000\040\000\040\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\040\000\000\000\000\000\
\000\000\000\000\040\000\000\000\000\000\000\000\040\000\039\000\
\040\000\000\000\000\000\000\000\040\000\040\000\040\000\004\000\
\005\000\006\000\007\000\008\000\000\000\010\000\011\000\012\000\
\032\000\013\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\033\000\034\000\000\000\000\000\017\000\035\000\036\000\
\037\000\038\000\018\000\000\000\000\000\000\000\000\000\004\000\
\005\000\006\000\007\000\008\000\080\000\010\000\011\000\012\000\
\032\000\013\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\033\000\034\000\000\000\000\000\017\000\035\000\036\000\
\037\000\038\000\018\000\045\000\004\000\005\000\006\000\007\000\
\008\000\000\000\010\000\011\000\012\000\000\000\013\000\000\000\
\000\000\000\000\010\000\000\000\000\000\010\000\010\000\000\000\
\010\000\010\000\017\000\010\000\010\000\037\000\038\000\018\000\
\010\000\010\000\010\000\010\000\000\000\010\000\011\000\000\000\
\000\000\011\000\011\000\000\000\011\000\011\000\010\000\011\000\
\011\000\000\000\000\000\000\000\011\000\011\000\011\000\011\000\
\000\000\011\000\008\000\000\000\000\000\008\000\008\000\000\000\
\008\000\008\000\011\000\008\000\008\000\000\000\000\000\000\000\
\008\000\008\000\000\000\009\000\000\000\008\000\009\000\009\000\
\000\000\009\000\009\000\000\000\009\000\009\000\008\000\000\000\
\000\000\009\000\009\000\000\000\012\000\000\000\009\000\012\000\
\012\000\000\000\012\000\012\000\000\000\012\000\012\000\009\000\
\000\000\000\000\014\000\000\000\000\000\014\000\014\000\012\000\
\014\000\014\000\000\000\000\000\000\000\000\000\000\000\000\000\
\012\000\000\000\000\000\013\000\000\000\014\000\013\000\013\000\
\000\000\013\000\013\000\000\000\000\000\016\000\014\000\000\000\
\016\000\016\000\000\000\016\000\016\000\022\000\013\000\000\000\
\022\000\022\000\000\000\022\000\022\000\000\000\000\000\013\000\
\016\000\000\000\015\000\015\000\000\000\015\000\015\000\018\000\
\022\000\016\000\018\000\018\000\000\000\018\000\018\000\000\000\
\000\000\022\000\015\000\000\000\019\000\019\000\000\000\019\000\
\019\000\000\000\018\000\015\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\018\000\019\000\000\000\000\000\000\000\
\004\000\005\000\006\000\007\000\008\000\019\000\010\000\011\000\
\012\000\032\000\013\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\033\000\034\000\000\000\000\000\017\000\035\000\
\036\000\037\000\038\000\018\000\004\000\005\000\006\000\007\000\
\008\000\000\000\010\000\011\000\012\000\032\000\013\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\033\000\034\000\
\000\000\000\000\017\000\035\000\036\000\037\000\038\000\018\000\
\081\000\004\000\005\000\006\000\007\000\008\000\000\000\010\000\
\011\000\012\000\032\000\013\000\000\000\042\000\000\000\000\000\
\000\000\000\000\000\000\033\000\034\000\000\000\000\000\017\000\
\035\000\036\000\037\000\038\000\018\000\004\000\005\000\006\000\
\007\000\008\000\000\000\010\000\011\000\012\000\032\000\013\000\
\000\000\000\000\000\000\000\000\043\000\000\000\000\000\033\000\
\034\000\000\000\000\000\017\000\035\000\036\000\037\000\038\000\
\018\000\004\000\005\000\006\000\007\000\008\000\000\000\010\000\
\011\000\012\000\032\000\013\000\000\000\000\000\065\000\000\000\
\000\000\000\000\000\000\033\000\034\000\000\000\000\000\017\000\
\035\000\036\000\037\000\038\000\018\000\004\000\005\000\006\000\
\007\000\008\000\000\000\010\000\011\000\012\000\032\000\013\000\
\000\000\000\000\000\000\000\000\000\000\066\000\000\000\033\000\
\034\000\000\000\000\000\017\000\035\000\036\000\037\000\038\000\
\018\000\004\000\005\000\006\000\007\000\008\000\000\000\010\000\
\011\000\012\000\057\000\013\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\033\000\034\000\000\000\000\000\017\000\
\035\000\036\000\037\000\038\000\018\000\004\000\005\000\006\000\
\007\000\008\000\000\000\010\000\011\000\012\000\032\000\013\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\033\000\
\034\000\000\000\000\000\017\000\035\000\036\000\037\000\038\000\
\018\000\004\000\005\000\006\000\007\000\008\000\000\000\010\000\
\011\000\012\000\073\000\013\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\033\000\034\000\000\000\000\000\017\000\
\035\000\036\000\037\000\038\000\018\000\004\000\005\000\006\000\
\007\000\008\000\000\000\010\000\011\000\012\000\000\000\013\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\033\000\
\034\000\000\000\000\000\017\000\035\000\036\000\037\000\038\000\
\018\000\004\000\005\000\006\000\007\000\008\000\000\000\010\000\
\011\000\012\000\000\000\013\000\004\000\005\000\006\000\007\000\
\008\000\000\000\010\000\011\000\012\000\000\000\013\000\017\000\
\035\000\036\000\037\000\038\000\018\000\000\000\000\000\000\000\
\000\000\000\000\017\000\000\000\000\000\000\000\000\000\018\000"

let yycheck = "\021\001\
\000\000\021\001\001\000\014\000\015\000\058\000\059\000\018\000\
\029\001\029\001\029\001\022\001\028\001\024\000\036\001\036\001\
\027\000\036\001\071\000\006\001\000\000\032\000\033\000\034\000\
\035\000\036\000\037\000\038\000\028\001\028\001\007\001\042\000\
\043\000\032\001\033\001\034\001\035\001\007\001\031\001\031\001\
\000\000\036\001\036\001\255\255\255\255\255\255\057\000\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\065\000\255\255\
\255\255\000\000\255\255\070\000\255\255\255\255\073\000\255\255\
\255\255\255\255\255\255\255\255\079\000\080\000\081\000\255\255\
\255\255\255\255\000\000\255\255\255\255\255\255\000\001\001\001\
\002\001\003\001\004\001\005\001\006\001\007\001\008\001\009\001\
\000\000\011\001\012\001\255\255\255\255\015\001\255\255\255\255\
\018\001\255\255\255\255\255\255\255\255\023\001\255\255\255\255\
\255\255\000\000\028\001\255\255\030\001\255\255\255\255\255\255\
\255\255\255\255\255\255\000\000\255\255\039\001\255\255\255\255\
\255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
\022\000\255\255\255\255\025\000\026\000\000\000\255\255\029\000\
\255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
\255\255\255\255\255\255\041\000\255\255\255\255\044\000\000\000\
\255\255\255\255\048\000\049\000\050\000\051\000\052\000\053\000\
\054\000\055\000\056\000\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\067\000\255\255\255\255\
\255\255\255\255\072\000\255\255\255\255\255\255\076\000\000\000\
\078\000\255\255\255\255\255\255\082\000\083\000\084\000\001\001\
\002\001\003\001\004\001\005\001\255\255\007\001\008\001\009\001\
\010\001\011\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\019\001\020\001\255\255\255\255\023\001\024\001\025\001\
\026\001\027\001\028\001\255\255\255\255\255\255\255\255\001\001\
\002\001\003\001\004\001\005\001\038\001\007\001\008\001\009\001\
\010\001\011\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\019\001\020\001\255\255\255\255\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\001\001\002\001\003\001\004\001\
\005\001\255\255\007\001\008\001\009\001\255\255\011\001\255\255\
\255\255\255\255\010\001\255\255\255\255\013\001\014\001\255\255\
\016\001\017\001\023\001\019\001\020\001\026\001\027\001\028\001\
\024\001\025\001\026\001\027\001\255\255\029\001\010\001\255\255\
\255\255\013\001\014\001\255\255\016\001\017\001\038\001\019\001\
\020\001\255\255\255\255\255\255\024\001\025\001\026\001\027\001\
\255\255\029\001\010\001\255\255\255\255\013\001\014\001\255\255\
\016\001\017\001\038\001\019\001\020\001\255\255\255\255\255\255\
\024\001\025\001\255\255\010\001\255\255\029\001\013\001\014\001\
\255\255\016\001\017\001\255\255\019\001\020\001\038\001\255\255\
\255\255\024\001\025\001\255\255\010\001\255\255\029\001\013\001\
\014\001\255\255\016\001\017\001\255\255\019\001\020\001\038\001\
\255\255\255\255\010\001\255\255\255\255\013\001\014\001\029\001\
\016\001\017\001\255\255\255\255\255\255\255\255\255\255\255\255\
\038\001\255\255\255\255\010\001\255\255\029\001\013\001\014\001\
\255\255\016\001\017\001\255\255\255\255\010\001\038\001\255\255\
\013\001\014\001\255\255\016\001\017\001\010\001\029\001\255\255\
\013\001\014\001\255\255\016\001\017\001\255\255\255\255\038\001\
\029\001\255\255\013\001\014\001\255\255\016\001\017\001\010\001\
\029\001\038\001\013\001\014\001\255\255\016\001\017\001\255\255\
\255\255\038\001\029\001\255\255\013\001\014\001\255\255\016\001\
\017\001\255\255\029\001\038\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\038\001\029\001\255\255\255\255\255\255\
\001\001\002\001\003\001\004\001\005\001\038\001\007\001\008\001\
\009\001\010\001\011\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\019\001\020\001\255\255\255\255\023\001\024\001\
\025\001\026\001\027\001\028\001\001\001\002\001\003\001\004\001\
\005\001\255\255\007\001\008\001\009\001\010\001\011\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\019\001\020\001\
\255\255\255\255\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\001\001\002\001\003\001\004\001\005\001\255\255\007\001\
\008\001\009\001\010\001\011\001\255\255\013\001\255\255\255\255\
\255\255\255\255\255\255\019\001\020\001\255\255\255\255\023\001\
\024\001\025\001\026\001\027\001\028\001\001\001\002\001\003\001\
\004\001\005\001\255\255\007\001\008\001\009\001\010\001\011\001\
\255\255\255\255\255\255\255\255\016\001\255\255\255\255\019\001\
\020\001\255\255\255\255\023\001\024\001\025\001\026\001\027\001\
\028\001\001\001\002\001\003\001\004\001\005\001\255\255\007\001\
\008\001\009\001\010\001\011\001\255\255\255\255\014\001\255\255\
\255\255\255\255\255\255\019\001\020\001\255\255\255\255\023\001\
\024\001\025\001\026\001\027\001\028\001\001\001\002\001\003\001\
\004\001\005\001\255\255\007\001\008\001\009\001\010\001\011\001\
\255\255\255\255\255\255\255\255\255\255\017\001\255\255\019\001\
\020\001\255\255\255\255\023\001\024\001\025\001\026\001\027\001\
\028\001\001\001\002\001\003\001\004\001\005\001\255\255\007\001\
\008\001\009\001\010\001\011\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\019\001\020\001\255\255\255\255\023\001\
\024\001\025\001\026\001\027\001\028\001\001\001\002\001\003\001\
\004\001\005\001\255\255\007\001\008\001\009\001\010\001\011\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\019\001\
\020\001\255\255\255\255\023\001\024\001\025\001\026\001\027\001\
\028\001\001\001\002\001\003\001\004\001\005\001\255\255\007\001\
\008\001\009\001\010\001\011\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\019\001\020\001\255\255\255\255\023\001\
\024\001\025\001\026\001\027\001\028\001\001\001\002\001\003\001\
\004\001\005\001\255\255\007\001\008\001\009\001\255\255\011\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\019\001\
\020\001\255\255\255\255\023\001\024\001\025\001\026\001\027\001\
\028\001\001\001\002\001\003\001\004\001\005\001\255\255\007\001\
\008\001\009\001\255\255\011\001\001\001\002\001\003\001\004\001\
\005\001\255\255\007\001\008\001\009\001\255\255\011\001\023\001\
\024\001\025\001\026\001\027\001\028\001\255\255\255\255\255\255\
\255\255\255\255\023\001\255\255\255\255\255\255\255\255\028\001"

let yynames_const = "\
  Z\000\
  INT_CAST\000\
  FLOAT_CAST\000\
  TRUE\000\
  FALSE\000\
  SEQ\000\
  SKIP\000\
  IF\000\
  THEN\000\
  ELSE\000\
  WHILE\000\
  DO\000\
  DONE\000\
  FOR\000\
  LT\000\
  LTE\000\
  EQ\000\
  ASGNOP\000\
  DEREF\000\
  PLUS\000\
  MINUS\000\
  MUL\000\
  DIV\000\
  LPAREN\000\
  RPAREN\000\
  FUN\000\
  COLON\000\
  TINT\000\
  TBOOL\000\
  TUNIT\000\
  TFLOAT\000\
  ARROW\000\
  FUNX\000\
  EOF\000\
  IN\000\
  LET\000\
  LETX\000\
  "

let yynames_block = "\
  INT\000\
  FLOAT\000\
  LOC\000\
  VAR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 56 "parser.mly"
                            ( _1 )
# 416 "parser.ml"
               : ImpAST.expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 60 "parser.mly"
                               (TInt)
# 422 "parser.ml"
               : 'tip))
; (fun __caml_parser_env ->
    Obj.repr(
# 61 "parser.mly"
                               (TBool)
# 428 "parser.ml"
               : 'tip))
; (fun __caml_parser_env ->
    Obj.repr(
# 62 "parser.mly"
                               (TUnit)
# 434 "parser.ml"
               : 'tip))
; (fun __caml_parser_env ->
    Obj.repr(
# 63 "parser.mly"
                               (TFloat)
# 440 "parser.ml"
               : 'tip))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tip) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tip) in
    Obj.repr(
# 64 "parser.mly"
                               ( TArrow (_1, _3) )
# 448 "parser.ml"
               : 'tip))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tip) in
    Obj.repr(
# 65 "parser.mly"
                               ( _2 )
# 455 "parser.ml"
               : 'tip))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 68 "parser.mly"
                               ( Op (_1,Plus,_3, location()) )
# 463 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 69 "parser.mly"
                                ( Op (_1,Minus,_3, location()) )
# 471 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 70 "parser.mly"
                              ( Op (_1,Mul,_3, location()) )
# 479 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 71 "parser.mly"
                              ( Op (_1,Div,_3, location()) )
# 487 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 72 "parser.mly"
                               ( Atrib (_1,_3, location()) )
# 495 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 73 "parser.mly"
                               ( Op (_1, Mic, _3, location()) )
# 503 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 74 "parser.mly"
                              ( Op (_1, MicS, _3, location()) )
# 511 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 75 "parser.mly"
                               ( Secv (_1,_3, location()) )
# 519 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 77 "parser.mly"
                               ( If (_2, _4, _6, location()) )
# 528 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 78 "parser.mly"
                               ( While (_2, _4, location()) )
# 536 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 80 "parser.mly"
                               ( For (_3, _5, _7, _9, location()) )
# 546 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'tip) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 82 "parser.mly"
                               ( Fun (_3, _5, _8, location()) )
# 555 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'funexpr) in
    Obj.repr(
# 83 "parser.mly"
                               ( App (_1, _2, location()) )
# 563 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'funexpr) in
    Obj.repr(
# 84 "parser.mly"
                               ( _1 )
# 570 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'tip) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 85 "parser.mly"
                                                  ( Let(_2,_4,_6,_8,location()))
# 580 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 86 "parser.mly"
                               ( parseError (location ()) )
# 586 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 90 "parser.mly"
                               ( Int (_1,location()) )
# 593 "parser.ml"
               : 'funexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 91 "parser.mly"
                               ( Float (_1,location()) )
# 600 "parser.ml"
               : 'funexpr))
; (fun __caml_parser_env ->
    Obj.repr(
# 92 "parser.mly"
                               ( Bool (true, location()) )
# 606 "parser.ml"
               : 'funexpr))
; (fun __caml_parser_env ->
    Obj.repr(
# 93 "parser.mly"
                               ( Bool (false, location()) )
# 612 "parser.ml"
               : 'funexpr))
; (fun __caml_parser_env ->
    Obj.repr(
# 94 "parser.mly"
                               ( Skip (location()) )
# 618 "parser.ml"
               : 'funexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 95 "parser.mly"
                               ( Var (_1,location()) )
# 625 "parser.ml"
               : 'funexpr))
; (fun __caml_parser_env ->
    Obj.repr(
# 96 "parser.mly"
                               ( IntOfFloat (location()) )
# 631 "parser.ml"
               : 'funexpr))
; (fun __caml_parser_env ->
    Obj.repr(
# 97 "parser.mly"
                               ( FloatOfInt (location()) )
# 637 "parser.ml"
               : 'funexpr))
; (fun __caml_parser_env ->
    Obj.repr(
# 98 "parser.mly"
                               ( Z (location()) )
# 643 "parser.ml"
               : 'funexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 99 "parser.mly"
                               ( _2 )
# 650 "parser.ml"
               : 'funexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 100 "parser.mly"
                               ( Loc (_2, location()) )
# 657 "parser.ml"
               : 'funexpr))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : ImpAST.expr)
