type token =
  | INT_CAST
  | FLOAT_CAST
  | FST
  | SND
  | UNBOX
  | BOX
  | COMMA
  | INT of (int)
  | FLOAT of (float)
  | VAR of (string)
  | TRUE
  | FALSE
  | SEQ
  | SKIP
  | IF
  | THEN
  | ELSE
  | WHILE
  | DO
  | DONE
  | FOR
  | LT
  | LTE
  | EQ
  | ASGNOP
  | DEREF
  | PLUS
  | MINUS
  | MUL
  | DIV
  | LPAREN
  | RPAREN
  | FUN
  | COLON
  | LET
  | REC
  | IN
  | REF
  | TINT
  | TBOOL
  | TUNIT
  | TFLOAT
  | ARROW
  | MATCH
  | WITH
  | INJL
  | INJR
  | PIPE
  | EOF

open Parsing;;
let _ = parse_error;;
# 3 "parser.mly"
(* Open is used for importing another module. 
   Each file is organized as a module with the module name being the
   file name without extension where the first letter is capitalized
*)
open ImpAST  (* refer to definitions from ImpAST directly *)
open Lexing  (* Lexing is a predefined library used for lexing *)

(* Formats a string describing the location of the production being currently 
   parsed *)
let location () =  let start_pos = Parsing.symbol_start_pos () in
    let end_pos = Parsing.symbol_end_pos () in
    (start_pos.pos_fname,start_pos.pos_lnum, start_pos.pos_cnum - start_pos.pos_bol, end_pos.pos_lnum, end_pos.pos_cnum - end_pos.pos_bol)

(* Throws a ParseError with the specified location*)
let parseError loc = raise (Lexer.ParseError loc)

# 72 "parser.ml"
let yytransl_const = [|
  257 (* INT_CAST *);
  258 (* FLOAT_CAST *);
  259 (* FST *);
  260 (* SND *);
  261 (* UNBOX *);
  262 (* BOX *);
  263 (* COMMA *);
  267 (* TRUE *);
  268 (* FALSE *);
  269 (* SEQ *);
  270 (* SKIP *);
  271 (* IF *);
  272 (* THEN *);
  273 (* ELSE *);
  274 (* WHILE *);
  275 (* DO *);
  276 (* DONE *);
  277 (* FOR *);
  278 (* LT *);
  279 (* LTE *);
  280 (* EQ *);
  281 (* ASGNOP *);
  282 (* DEREF *);
  283 (* PLUS *);
  284 (* MINUS *);
  285 (* MUL *);
  286 (* DIV *);
  287 (* LPAREN *);
  288 (* RPAREN *);
  289 (* FUN *);
  290 (* COLON *);
  291 (* LET *);
  292 (* REC *);
  293 (* IN *);
  294 (* REF *);
  295 (* TINT *);
  296 (* TBOOL *);
  297 (* TUNIT *);
  298 (* TFLOAT *);
  299 (* ARROW *);
  300 (* MATCH *);
  301 (* WITH *);
  302 (* INJL *);
  303 (* INJR *);
  304 (* PIPE *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  264 (* INT *);
  265 (* FLOAT *);
  266 (* VAR *);
    0|]

let yylhs = "\255\255\
\001\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\000\000"

let yylen = "\002\000\
\002\000\001\000\001\000\001\000\001\000\003\000\003\000\002\000\
\003\000\003\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\002\000\006\000\005\000\009\000\008\000\
\009\000\006\000\002\000\001\000\004\000\004\000\020\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\005\000\003\000\002\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\032\000\039\000\040\000\042\000\043\000\041\000\
\000\000\033\000\034\000\038\000\035\000\036\000\037\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\048\000\000\000\028\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\001\000\027\000\000\000\000\000\000\000\000\000\
\045\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\002\000\003\000\004\000\005\000\000\000\000\000\000\000\
\022\000\000\000\044\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\008\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\007\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\027\000\028\000\086\000\029\000"

let yysindex = "\004\000\
\058\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\058\255\000\000\000\000\000\000\000\000\000\000\000\000\058\255\
\058\255\240\254\058\255\058\255\247\254\248\254\058\255\058\255\
\031\005\031\005\000\000\005\003\000\000\132\004\138\003\169\003\
\058\255\013\005\106\003\001\255\002\255\017\255\013\005\067\003\
\251\254\253\254\058\255\058\255\058\255\058\255\058\255\058\255\
\058\255\058\255\000\000\000\000\058\255\058\255\163\004\058\255\
\000\000\254\254\058\255\003\255\249\254\250\254\250\254\132\004\
\219\255\219\255\219\255\000\005\000\005\031\005\031\005\200\003\
\231\003\058\255\006\004\250\254\038\004\250\254\007\255\250\254\
\250\254\000\000\000\000\000\000\000\000\237\254\237\254\058\255\
\000\000\194\004\000\000\079\255\058\255\236\254\038\255\237\254\
\112\255\250\254\250\254\000\000\250\254\225\004\058\255\009\255\
\132\004\058\255\020\255\000\000\230\254\019\255\237\254\069\004\
\058\255\101\004\250\254\058\255\132\004\058\255\146\255\225\004\
\132\004\012\255\058\255\036\003\018\255\043\255\065\255\044\255\
\250\254\153\255\034\255\058\255\132\004"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\104\002\000\000\000\000\
\000\000\019\001\000\000\000\000\000\000\000\000\064\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\127\002\
\014\002\037\002\247\001\172\001\208\001\103\001\136\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\193\000\241\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\097\000\
\000\000\000\000\000\000\000\000\000\000\059\002\000\000\000\000\
\146\002\000\000\000\000\000\000\049\000\001\000\145\000\000\000\
\000\000\000\000\000\000\000\000\169\002\000\000\000\000\082\002\
\193\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\212\002"

let yygindex = "\000\000\
\000\000\253\255\073\000\093\000"

let yytablesize = 1605
let yytable = "\080\000\
\010\000\037\000\099\000\106\000\001\000\030\000\098\000\098\000\
\099\000\099\000\058\000\100\000\031\000\032\000\033\000\034\000\
\035\000\100\000\100\000\039\000\040\000\036\000\101\000\101\000\
\081\000\059\000\060\000\038\000\062\000\055\000\063\000\076\000\
\082\000\083\000\084\000\085\000\078\000\095\000\079\000\064\000\
\065\000\066\000\067\000\068\000\069\000\070\000\071\000\107\000\
\009\000\072\000\073\000\113\000\075\000\115\000\123\000\077\000\
\100\000\003\000\004\000\005\000\006\000\007\000\008\000\009\000\
\126\000\010\000\011\000\012\000\013\000\014\000\090\000\015\000\
\016\000\127\000\128\000\017\000\132\000\129\000\018\000\000\000\
\000\000\000\000\000\000\019\000\102\000\000\000\000\000\000\000\
\020\000\105\000\021\000\000\000\022\000\000\000\000\000\023\000\
\011\000\000\000\000\000\112\000\000\000\024\000\114\000\025\000\
\026\000\098\000\000\000\099\000\000\000\117\000\104\000\000\000\
\120\000\000\000\121\000\000\000\100\000\041\000\042\000\124\000\
\052\000\101\000\052\000\052\000\052\000\000\000\052\000\052\000\
\133\000\000\000\000\000\052\000\052\000\000\000\000\000\087\000\
\000\000\000\000\098\000\000\000\099\000\000\000\000\000\108\000\
\006\000\000\000\000\000\052\000\092\000\100\000\094\000\000\000\
\096\000\097\000\101\000\000\000\052\000\052\000\052\000\052\000\
\052\000\052\000\052\000\052\000\052\000\052\000\000\000\052\000\
\000\000\052\000\109\000\110\000\098\000\111\000\099\000\000\000\
\000\000\122\000\000\000\098\000\000\000\099\000\052\000\100\000\
\131\000\000\000\000\000\119\000\101\000\000\000\100\000\000\000\
\029\000\000\000\052\000\101\000\000\000\052\000\000\000\000\000\
\000\000\130\000\000\000\000\000\052\000\000\000\052\000\000\000\
\000\000\052\000\000\000\000\000\052\000\052\000\000\000\000\000\
\052\000\000\000\000\000\004\000\005\000\006\000\007\000\008\000\
\000\000\052\000\010\000\011\000\012\000\013\000\014\000\000\000\
\015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\030\000\000\000\000\000\046\000\019\000\047\000\048\000\049\000\
\050\000\020\000\000\000\000\000\000\000\000\000\000\000\000\000\
\023\000\010\000\010\000\010\000\010\000\010\000\000\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\000\000\
\010\000\010\000\046\000\010\000\010\000\000\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\000\000\010\000\000\000\000\000\010\000\000\000\000\000\
\000\000\000\000\000\000\010\000\000\000\010\000\000\000\000\000\
\010\000\009\000\009\000\009\000\009\000\009\000\000\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\047\000\
\009\000\009\000\000\000\009\000\009\000\000\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\000\000\009\000\009\000\
\009\000\000\000\009\000\000\000\000\000\009\000\000\000\000\000\
\000\000\000\000\000\000\009\000\000\000\009\000\000\000\000\000\
\009\000\011\000\011\000\011\000\011\000\011\000\014\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\000\000\
\011\000\011\000\000\000\011\000\011\000\000\000\011\000\011\000\
\011\000\011\000\011\000\000\000\011\000\000\000\011\000\011\000\
\011\000\000\000\011\000\000\000\000\000\011\000\000\000\015\000\
\000\000\000\000\000\000\000\000\000\000\011\000\000\000\000\000\
\011\000\006\000\006\000\006\000\006\000\006\000\000\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\000\000\
\006\000\006\000\000\000\006\000\006\000\000\000\006\000\006\000\
\006\000\006\000\006\000\012\000\006\000\000\000\006\000\006\000\
\006\000\000\000\006\000\000\000\000\000\006\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\006\000\000\000\000\000\
\006\000\029\000\029\000\029\000\029\000\029\000\000\000\029\000\
\029\000\029\000\029\000\029\000\029\000\029\000\029\000\013\000\
\029\000\029\000\000\000\029\000\029\000\000\000\029\000\029\000\
\000\000\029\000\029\000\000\000\029\000\000\000\029\000\029\000\
\029\000\000\000\029\000\000\000\000\000\029\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\029\000\000\000\000\000\
\029\000\030\000\030\000\030\000\030\000\030\000\016\000\030\000\
\030\000\030\000\030\000\030\000\030\000\030\000\030\000\000\000\
\030\000\030\000\000\000\030\000\030\000\000\000\030\000\030\000\
\000\000\030\000\030\000\000\000\030\000\018\000\030\000\030\000\
\030\000\000\000\030\000\046\000\046\000\030\000\000\000\000\000\
\000\000\046\000\000\000\000\000\000\000\030\000\000\000\046\000\
\030\000\000\000\046\000\046\000\017\000\046\000\046\000\000\000\
\046\000\046\000\000\000\046\000\000\000\046\000\046\000\046\000\
\046\000\000\000\046\000\000\000\046\000\000\000\000\000\046\000\
\000\000\000\000\021\000\000\000\000\000\000\000\000\000\046\000\
\047\000\047\000\046\000\000\000\000\000\000\000\047\000\000\000\
\000\000\000\000\000\000\000\000\047\000\000\000\000\000\047\000\
\047\000\023\000\047\000\047\000\000\000\047\000\047\000\000\000\
\047\000\000\000\047\000\047\000\047\000\047\000\000\000\047\000\
\000\000\047\000\000\000\000\000\047\000\000\000\000\000\020\000\
\000\000\000\000\000\000\000\000\047\000\014\000\000\000\047\000\
\000\000\000\000\000\000\014\000\000\000\000\000\014\000\014\000\
\000\000\014\000\014\000\000\000\014\000\014\000\019\000\014\000\
\000\000\014\000\014\000\014\000\014\000\000\000\014\000\000\000\
\014\000\000\000\000\000\014\000\000\000\000\000\015\000\000\000\
\000\000\026\000\000\000\014\000\015\000\000\000\014\000\015\000\
\015\000\000\000\015\000\015\000\000\000\015\000\015\000\000\000\
\015\000\000\000\015\000\015\000\015\000\015\000\000\000\015\000\
\024\000\015\000\000\000\000\000\015\000\000\000\000\000\000\000\
\000\000\000\000\012\000\000\000\015\000\000\000\000\000\015\000\
\012\000\000\000\000\000\012\000\012\000\000\000\012\000\012\000\
\025\000\012\000\012\000\000\000\012\000\000\000\012\000\012\000\
\000\000\000\000\000\000\012\000\000\000\012\000\000\000\000\000\
\012\000\000\000\000\000\031\000\000\000\000\000\013\000\000\000\
\012\000\000\000\000\000\012\000\013\000\000\000\000\000\013\000\
\013\000\000\000\013\000\013\000\000\000\013\000\013\000\000\000\
\013\000\000\000\013\000\013\000\000\000\000\000\000\000\013\000\
\000\000\013\000\000\000\000\000\013\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\013\000\016\000\000\000\013\000\
\000\000\000\000\000\000\016\000\051\000\000\000\016\000\016\000\
\000\000\016\000\016\000\000\000\016\000\016\000\000\000\000\000\
\000\000\000\000\000\000\000\000\018\000\000\000\016\000\000\000\
\016\000\000\000\018\000\016\000\000\000\018\000\018\000\000\000\
\018\000\018\000\000\000\016\000\000\000\000\000\016\000\000\000\
\000\000\000\000\000\000\017\000\000\000\018\000\000\000\018\000\
\000\000\017\000\018\000\000\000\017\000\017\000\000\000\017\000\
\017\000\000\000\018\000\000\000\000\000\018\000\000\000\000\000\
\000\000\021\000\000\000\000\000\017\000\000\000\017\000\021\000\
\000\000\017\000\021\000\021\000\000\000\021\000\021\000\000\000\
\000\000\017\000\000\000\000\000\017\000\000\000\000\000\000\000\
\023\000\000\000\021\000\000\000\021\000\000\000\023\000\021\000\
\000\000\023\000\023\000\000\000\023\000\023\000\000\000\021\000\
\000\000\000\000\021\000\000\000\000\000\000\000\020\000\000\000\
\000\000\023\000\000\000\023\000\000\000\000\000\023\000\020\000\
\020\000\000\000\020\000\020\000\000\000\000\000\023\000\000\000\
\000\000\023\000\000\000\000\000\000\000\019\000\000\000\020\000\
\000\000\020\000\000\000\000\000\020\000\000\000\019\000\019\000\
\000\000\019\000\019\000\000\000\020\000\000\000\000\000\020\000\
\026\000\000\000\000\000\000\000\000\000\000\000\019\000\000\000\
\019\000\026\000\026\000\019\000\026\000\026\000\000\000\000\000\
\000\000\000\000\000\000\019\000\000\000\000\000\019\000\024\000\
\000\000\026\000\000\000\026\000\000\000\000\000\026\000\000\000\
\024\000\024\000\000\000\024\000\024\000\000\000\026\000\000\000\
\000\000\026\000\000\000\000\000\000\000\000\000\000\000\025\000\
\024\000\000\000\024\000\000\000\000\000\024\000\000\000\000\000\
\025\000\025\000\000\000\025\000\025\000\024\000\000\000\000\000\
\024\000\000\000\031\000\000\000\000\000\000\000\000\000\000\000\
\025\000\000\000\025\000\031\000\031\000\025\000\031\000\031\000\
\000\000\000\000\000\000\000\000\000\000\025\000\000\000\000\000\
\025\000\000\000\000\000\031\000\000\000\031\000\000\000\000\000\
\031\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\031\000\000\000\000\000\031\000\000\000\004\000\005\000\006\000\
\007\000\008\000\000\000\000\000\010\000\011\000\012\000\013\000\
\014\000\043\000\015\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\044\000\045\000\000\000\046\000\019\000\047\000\
\048\000\049\000\050\000\020\000\004\000\005\000\006\000\007\000\
\008\000\000\000\023\000\010\000\011\000\012\000\013\000\014\000\
\043\000\015\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\044\000\045\000\000\000\046\000\019\000\047\000\048\000\
\049\000\050\000\020\000\004\000\005\000\006\000\007\000\008\000\
\000\000\023\000\010\000\011\000\012\000\013\000\014\000\043\000\
\015\000\000\000\000\000\125\000\000\000\000\000\000\000\000\000\
\044\000\045\000\000\000\046\000\019\000\047\000\048\000\049\000\
\050\000\020\000\000\000\000\000\000\000\000\000\000\000\000\000\
\023\000\000\000\004\000\005\000\006\000\007\000\008\000\061\000\
\056\000\010\000\011\000\012\000\013\000\014\000\043\000\015\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\044\000\
\045\000\000\000\046\000\019\000\047\000\048\000\049\000\050\000\
\020\000\057\000\004\000\005\000\006\000\007\000\008\000\023\000\
\000\000\010\000\011\000\012\000\013\000\014\000\043\000\015\000\
\000\000\053\000\000\000\000\000\000\000\000\000\000\000\044\000\
\045\000\000\000\046\000\019\000\047\000\048\000\049\000\050\000\
\020\000\004\000\005\000\006\000\007\000\008\000\000\000\023\000\
\010\000\011\000\012\000\013\000\014\000\043\000\015\000\000\000\
\000\000\000\000\000\000\054\000\000\000\000\000\044\000\045\000\
\000\000\046\000\019\000\047\000\048\000\049\000\050\000\020\000\
\004\000\005\000\006\000\007\000\008\000\000\000\023\000\010\000\
\011\000\012\000\013\000\014\000\043\000\015\000\000\000\000\000\
\088\000\000\000\000\000\000\000\000\000\044\000\045\000\000\000\
\046\000\019\000\047\000\048\000\049\000\050\000\020\000\004\000\
\005\000\006\000\007\000\008\000\000\000\023\000\010\000\011\000\
\012\000\013\000\014\000\043\000\015\000\000\000\000\000\000\000\
\000\000\000\000\089\000\000\000\044\000\045\000\000\000\046\000\
\019\000\047\000\048\000\049\000\050\000\020\000\004\000\005\000\
\006\000\007\000\008\000\000\000\023\000\010\000\011\000\012\000\
\013\000\014\000\043\000\015\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\044\000\045\000\000\000\046\000\019\000\
\047\000\048\000\049\000\050\000\020\000\091\000\004\000\005\000\
\006\000\007\000\008\000\023\000\000\000\010\000\011\000\012\000\
\013\000\014\000\043\000\015\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\044\000\045\000\000\000\046\000\019\000\
\047\000\048\000\049\000\050\000\020\000\004\000\005\000\006\000\
\007\000\008\000\093\000\023\000\010\000\011\000\012\000\013\000\
\014\000\043\000\015\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\044\000\045\000\000\000\046\000\019\000\047\000\
\048\000\049\000\050\000\020\000\116\000\004\000\005\000\006\000\
\007\000\008\000\023\000\000\000\010\000\011\000\012\000\013\000\
\014\000\043\000\015\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\044\000\045\000\000\000\046\000\019\000\047\000\
\048\000\049\000\050\000\020\000\004\000\005\000\006\000\007\000\
\008\000\118\000\023\000\010\000\011\000\012\000\013\000\014\000\
\043\000\015\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\044\000\045\000\000\000\046\000\019\000\047\000\048\000\
\049\000\050\000\020\000\004\000\005\000\006\000\007\000\008\000\
\000\000\023\000\010\000\011\000\012\000\013\000\014\000\074\000\
\015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\044\000\045\000\000\000\046\000\019\000\047\000\048\000\049\000\
\050\000\020\000\004\000\005\000\006\000\007\000\008\000\000\000\
\023\000\010\000\011\000\012\000\013\000\014\000\103\000\015\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\044\000\
\045\000\000\000\046\000\019\000\047\000\048\000\049\000\050\000\
\020\000\004\000\005\000\006\000\007\000\008\000\000\000\023\000\
\010\000\011\000\012\000\013\000\014\000\000\000\015\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\044\000\045\000\
\000\000\046\000\019\000\047\000\048\000\049\000\050\000\020\000\
\004\000\005\000\006\000\007\000\008\000\000\000\023\000\010\000\
\011\000\012\000\013\000\014\000\000\000\015\000\000\000\006\000\
\007\000\008\000\000\000\000\000\010\000\011\000\012\000\013\000\
\014\000\019\000\015\000\000\000\049\000\050\000\020\000\004\000\
\005\000\006\000\007\000\008\000\000\000\023\000\010\000\011\000\
\012\000\013\000\014\000\020\000\015\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\019\000\000\000\000\000\000\000\000\000\020\000\000\000\000\000\
\000\000\000\000\000\000\000\000\023\000"

let yycheck = "\006\001\
\000\000\010\001\029\001\024\001\001\000\009\000\027\001\027\001\
\029\001\029\001\010\001\038\001\016\000\017\000\031\001\019\000\
\020\000\038\001\038\001\023\000\024\000\031\001\043\001\043\001\
\031\001\024\001\010\001\036\001\034\001\033\000\034\001\034\001\
\039\001\040\001\041\001\042\001\034\001\031\001\046\001\043\000\
\044\000\045\000\046\000\047\000\048\000\049\000\050\000\010\001\
\000\000\053\000\054\000\043\001\056\000\034\001\043\001\059\000\
\038\001\000\001\001\001\002\001\003\001\004\001\005\001\006\001\
\047\001\008\001\009\001\010\001\011\001\012\001\074\000\014\001\
\015\001\031\001\010\001\018\001\043\001\034\001\021\001\255\255\
\255\255\255\255\255\255\026\001\088\000\255\255\255\255\255\255\
\031\001\093\000\033\001\255\255\035\001\255\255\255\255\038\001\
\000\000\255\255\255\255\103\000\255\255\044\001\106\000\046\001\
\047\001\027\001\255\255\029\001\255\255\113\000\032\001\255\255\
\116\000\255\255\118\000\255\255\038\001\025\000\026\000\123\000\
\028\000\043\001\030\000\031\000\032\000\255\255\034\000\035\000\
\132\000\255\255\255\255\039\000\040\000\255\255\255\255\063\000\
\255\255\255\255\027\001\255\255\029\001\255\255\255\255\032\001\
\000\000\255\255\255\255\055\000\076\000\038\001\078\000\255\255\
\080\000\081\000\043\001\255\255\064\000\065\000\066\000\067\000\
\068\000\069\000\070\000\071\000\072\000\073\000\255\255\075\000\
\255\255\077\000\098\000\099\000\027\001\101\000\029\001\255\255\
\255\255\032\001\255\255\027\001\255\255\029\001\090\000\038\001\
\032\001\255\255\255\255\115\000\043\001\255\255\038\001\255\255\
\000\000\255\255\102\000\043\001\255\255\105\000\255\255\255\255\
\255\255\129\000\255\255\255\255\112\000\255\255\114\000\255\255\
\255\255\117\000\255\255\255\255\120\000\121\000\255\255\255\255\
\124\000\255\255\255\255\001\001\002\001\003\001\004\001\005\001\
\255\255\133\000\008\001\009\001\010\001\011\001\012\001\255\255\
\014\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\255\255\255\255\255\255\255\255\255\255\255\255\
\038\001\001\001\002\001\003\001\004\001\005\001\255\255\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\255\255\
\016\001\017\001\000\000\019\001\020\001\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\255\255\034\001\255\255\255\255\037\001\255\255\255\255\
\255\255\255\255\255\255\043\001\255\255\045\001\255\255\255\255\
\048\001\001\001\002\001\003\001\004\001\005\001\255\255\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\000\000\
\016\001\017\001\255\255\019\001\020\001\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\255\255\030\001\031\001\
\032\001\255\255\034\001\255\255\255\255\037\001\255\255\255\255\
\255\255\255\255\255\255\043\001\255\255\045\001\255\255\255\255\
\048\001\001\001\002\001\003\001\004\001\005\001\000\000\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\255\255\
\016\001\017\001\255\255\019\001\020\001\255\255\022\001\023\001\
\024\001\025\001\026\001\255\255\028\001\255\255\030\001\031\001\
\032\001\255\255\034\001\255\255\255\255\037\001\255\255\000\000\
\255\255\255\255\255\255\255\255\255\255\045\001\255\255\255\255\
\048\001\001\001\002\001\003\001\004\001\005\001\255\255\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\255\255\
\016\001\017\001\255\255\019\001\020\001\255\255\022\001\023\001\
\024\001\025\001\026\001\000\000\028\001\255\255\030\001\031\001\
\032\001\255\255\034\001\255\255\255\255\037\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\045\001\255\255\255\255\
\048\001\001\001\002\001\003\001\004\001\005\001\255\255\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\000\000\
\016\001\017\001\255\255\019\001\020\001\255\255\022\001\023\001\
\255\255\025\001\026\001\255\255\028\001\255\255\030\001\031\001\
\032\001\255\255\034\001\255\255\255\255\037\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\045\001\255\255\255\255\
\048\001\001\001\002\001\003\001\004\001\005\001\000\000\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\255\255\
\016\001\017\001\255\255\019\001\020\001\255\255\022\001\023\001\
\255\255\025\001\026\001\255\255\028\001\000\000\030\001\031\001\
\032\001\255\255\034\001\001\001\002\001\037\001\255\255\255\255\
\255\255\007\001\255\255\255\255\255\255\045\001\255\255\013\001\
\048\001\255\255\016\001\017\001\000\000\019\001\020\001\255\255\
\022\001\023\001\255\255\025\001\255\255\027\001\028\001\029\001\
\030\001\255\255\032\001\255\255\034\001\255\255\255\255\037\001\
\255\255\255\255\000\000\255\255\255\255\255\255\255\255\045\001\
\001\001\002\001\048\001\255\255\255\255\255\255\007\001\255\255\
\255\255\255\255\255\255\255\255\013\001\255\255\255\255\016\001\
\017\001\000\000\019\001\020\001\255\255\022\001\023\001\255\255\
\025\001\255\255\027\001\028\001\029\001\030\001\255\255\032\001\
\255\255\034\001\255\255\255\255\037\001\255\255\255\255\000\000\
\255\255\255\255\255\255\255\255\045\001\007\001\255\255\048\001\
\255\255\255\255\255\255\013\001\255\255\255\255\016\001\017\001\
\255\255\019\001\020\001\255\255\022\001\023\001\000\000\025\001\
\255\255\027\001\028\001\029\001\030\001\255\255\032\001\255\255\
\034\001\255\255\255\255\037\001\255\255\255\255\007\001\255\255\
\255\255\000\000\255\255\045\001\013\001\255\255\048\001\016\001\
\017\001\255\255\019\001\020\001\255\255\022\001\023\001\255\255\
\025\001\255\255\027\001\028\001\029\001\030\001\255\255\032\001\
\000\000\034\001\255\255\255\255\037\001\255\255\255\255\255\255\
\255\255\255\255\007\001\255\255\045\001\255\255\255\255\048\001\
\013\001\255\255\255\255\016\001\017\001\255\255\019\001\020\001\
\000\000\022\001\023\001\255\255\025\001\255\255\027\001\028\001\
\255\255\255\255\255\255\032\001\255\255\034\001\255\255\255\255\
\037\001\255\255\255\255\000\000\255\255\255\255\007\001\255\255\
\045\001\255\255\255\255\048\001\013\001\255\255\255\255\016\001\
\017\001\255\255\019\001\020\001\255\255\022\001\023\001\255\255\
\025\001\255\255\027\001\028\001\255\255\255\255\255\255\032\001\
\255\255\034\001\255\255\255\255\037\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\045\001\007\001\255\255\048\001\
\255\255\255\255\255\255\013\001\000\000\255\255\016\001\017\001\
\255\255\019\001\020\001\255\255\022\001\023\001\255\255\255\255\
\255\255\255\255\255\255\255\255\007\001\255\255\032\001\255\255\
\034\001\255\255\013\001\037\001\255\255\016\001\017\001\255\255\
\019\001\020\001\255\255\045\001\255\255\255\255\048\001\255\255\
\255\255\255\255\255\255\007\001\255\255\032\001\255\255\034\001\
\255\255\013\001\037\001\255\255\016\001\017\001\255\255\019\001\
\020\001\255\255\045\001\255\255\255\255\048\001\255\255\255\255\
\255\255\007\001\255\255\255\255\032\001\255\255\034\001\013\001\
\255\255\037\001\016\001\017\001\255\255\019\001\020\001\255\255\
\255\255\045\001\255\255\255\255\048\001\255\255\255\255\255\255\
\007\001\255\255\032\001\255\255\034\001\255\255\013\001\037\001\
\255\255\016\001\017\001\255\255\019\001\020\001\255\255\045\001\
\255\255\255\255\048\001\255\255\255\255\255\255\007\001\255\255\
\255\255\032\001\255\255\034\001\255\255\255\255\037\001\016\001\
\017\001\255\255\019\001\020\001\255\255\255\255\045\001\255\255\
\255\255\048\001\255\255\255\255\255\255\007\001\255\255\032\001\
\255\255\034\001\255\255\255\255\037\001\255\255\016\001\017\001\
\255\255\019\001\020\001\255\255\045\001\255\255\255\255\048\001\
\007\001\255\255\255\255\255\255\255\255\255\255\032\001\255\255\
\034\001\016\001\017\001\037\001\019\001\020\001\255\255\255\255\
\255\255\255\255\255\255\045\001\255\255\255\255\048\001\007\001\
\255\255\032\001\255\255\034\001\255\255\255\255\037\001\255\255\
\016\001\017\001\255\255\019\001\020\001\255\255\045\001\255\255\
\255\255\048\001\255\255\255\255\255\255\255\255\255\255\007\001\
\032\001\255\255\034\001\255\255\255\255\037\001\255\255\255\255\
\016\001\017\001\255\255\019\001\020\001\045\001\255\255\255\255\
\048\001\255\255\007\001\255\255\255\255\255\255\255\255\255\255\
\032\001\255\255\034\001\016\001\017\001\037\001\019\001\020\001\
\255\255\255\255\255\255\255\255\255\255\045\001\255\255\255\255\
\048\001\255\255\255\255\032\001\255\255\034\001\255\255\255\255\
\037\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\045\001\255\255\255\255\048\001\255\255\001\001\002\001\003\001\
\004\001\005\001\255\255\255\255\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\022\001\023\001\255\255\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\001\001\002\001\003\001\004\001\
\005\001\255\255\038\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\022\001\023\001\255\255\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\001\001\002\001\003\001\004\001\005\001\
\255\255\038\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\255\255\255\255\048\001\255\255\255\255\255\255\255\255\
\022\001\023\001\255\255\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\255\255\255\255\255\255\255\255\255\255\255\255\
\038\001\255\255\001\001\002\001\003\001\004\001\005\001\045\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\022\001\
\023\001\255\255\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\001\001\002\001\003\001\004\001\005\001\038\001\
\255\255\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\255\255\016\001\255\255\255\255\255\255\255\255\255\255\022\001\
\023\001\255\255\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\001\001\002\001\003\001\004\001\005\001\255\255\038\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\255\255\
\255\255\255\255\255\255\019\001\255\255\255\255\022\001\023\001\
\255\255\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\001\001\002\001\003\001\004\001\005\001\255\255\038\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\255\255\255\255\
\017\001\255\255\255\255\255\255\255\255\022\001\023\001\255\255\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\001\001\
\002\001\003\001\004\001\005\001\255\255\038\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\255\255\255\255\255\255\
\255\255\255\255\020\001\255\255\022\001\023\001\255\255\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\001\001\002\001\
\003\001\004\001\005\001\255\255\038\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\022\001\023\001\255\255\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\001\001\002\001\
\003\001\004\001\005\001\038\001\255\255\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\022\001\023\001\255\255\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\001\001\002\001\003\001\
\004\001\005\001\037\001\038\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\022\001\023\001\255\255\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\001\001\002\001\003\001\
\004\001\005\001\038\001\255\255\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\022\001\023\001\255\255\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\001\001\002\001\003\001\004\001\
\005\001\037\001\038\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\022\001\023\001\255\255\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\001\001\002\001\003\001\004\001\005\001\
\255\255\038\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\022\001\023\001\255\255\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\001\001\002\001\003\001\004\001\005\001\255\255\
\038\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\022\001\
\023\001\255\255\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\001\001\002\001\003\001\004\001\005\001\255\255\038\001\
\008\001\009\001\010\001\011\001\012\001\255\255\014\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\022\001\023\001\
\255\255\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\001\001\002\001\003\001\004\001\005\001\255\255\038\001\008\001\
\009\001\010\001\011\001\012\001\255\255\014\001\255\255\003\001\
\004\001\005\001\255\255\255\255\008\001\009\001\010\001\011\001\
\012\001\026\001\014\001\255\255\029\001\030\001\031\001\001\001\
\002\001\003\001\004\001\005\001\255\255\038\001\008\001\009\001\
\010\001\011\001\012\001\031\001\014\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\026\001\255\255\255\255\255\255\255\255\031\001\255\255\255\255\
\255\255\255\255\255\255\255\255\038\001"

let yynames_const = "\
  INT_CAST\000\
  FLOAT_CAST\000\
  FST\000\
  SND\000\
  UNBOX\000\
  BOX\000\
  COMMA\000\
  TRUE\000\
  FALSE\000\
  SEQ\000\
  SKIP\000\
  IF\000\
  THEN\000\
  ELSE\000\
  WHILE\000\
  DO\000\
  DONE\000\
  FOR\000\
  LT\000\
  LTE\000\
  EQ\000\
  ASGNOP\000\
  DEREF\000\
  PLUS\000\
  MINUS\000\
  MUL\000\
  DIV\000\
  LPAREN\000\
  RPAREN\000\
  FUN\000\
  COLON\000\
  LET\000\
  REC\000\
  IN\000\
  REF\000\
  TINT\000\
  TBOOL\000\
  TUNIT\000\
  TFLOAT\000\
  ARROW\000\
  MATCH\000\
  WITH\000\
  INJL\000\
  INJR\000\
  PIPE\000\
  EOF\000\
  "

let yynames_block = "\
  INT\000\
  FLOAT\000\
  VAR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 108 "parser.mly"
                            ( _1 )
# 676 "parser.ml"
               : ImpAST.expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 118 "parser.mly"
                               (TInt)
# 682 "parser.ml"
               : 'tip))
; (fun __caml_parser_env ->
    Obj.repr(
# 119 "parser.mly"
                               (TBool)
# 688 "parser.ml"
               : 'tip))
; (fun __caml_parser_env ->
    Obj.repr(
# 120 "parser.mly"
                               (TUnit)
# 694 "parser.ml"
               : 'tip))
; (fun __caml_parser_env ->
    Obj.repr(
# 121 "parser.mly"
                               (TFloat)
# 700 "parser.ml"
               : 'tip))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tip) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tip) in
    Obj.repr(
# 122 "parser.mly"
                               ( TArrow (_1, _3) )
# 708 "parser.ml"
               : 'tip))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tip) in
    Obj.repr(
# 127 "parser.mly"
                               ( _2 )
# 715 "parser.ml"
               : 'tip))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'tip) in
    Obj.repr(
# 128 "parser.mly"
                               ( TRef _1 )
# 722 "parser.ml"
               : 'tip))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tip) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tip) in
    Obj.repr(
# 129 "parser.mly"
                              ( TSum (_1, _3) )
# 730 "parser.ml"
               : 'tip))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tip) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tip) in
    Obj.repr(
# 130 "parser.mly"
                     ( TPair (_1, _3) )
# 738 "parser.ml"
               : 'tip))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'tip) in
    Obj.repr(
# 131 "parser.mly"
                              ( TBox _2 )
# 745 "parser.ml"
               : 'tip))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 134 "parser.mly"
                               ( Op (_1,Plus,_3, location()) )
# 753 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 137 "parser.mly"
                                ( Op (_1,Minus,_3, location()) )
# 761 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 138 "parser.mly"
                              ( Op (_1,Mul,_3, location()) )
# 769 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 139 "parser.mly"
                              ( Op (_1,Div,_3, location()) )
# 777 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 140 "parser.mly"
                                ( Atrib (_1,_3, location()) )
# 785 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 141 "parser.mly"
                               ( Op (_1, Mic, _3, location()) )
# 793 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 142 "parser.mly"
                              ( Op (_1, MicS, _3, location()) )
# 801 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 143 "parser.mly"
                               ( Secv (_1,_3, location()) )
# 809 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 144 "parser.mly"
                              ( Boxed (_2,location()) )
# 816 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 146 "parser.mly"
                               ( If (_2, _4, _6, location()) )
# 825 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 164 "parser.mly"
                               ( While (_2, _4, location()) )
# 833 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 166 "parser.mly"
                               ( For (_3, _5, _7, _9, location()) )
# 843 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'tip) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 168 "parser.mly"
                               ( Fun (_3, _5, _8, location()) )
# 852 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'tip) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 170 "parser.mly"
                               ( LetRec (_3, _5, _7, _9, location()) )
# 862 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 172 "parser.mly"
                               ( Let (_2, _4, _6, location()) )
# 871 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'funexpr) in
    Obj.repr(
# 173 "parser.mly"
                               ( App (_1, _2, location()) )
# 879 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'funexpr) in
    Obj.repr(
# 177 "parser.mly"
                               ( _1 )
# 886 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'funexpr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'tip) in
    Obj.repr(
# 180 "parser.mly"
                               ( InjL(_2, _4, location()) )
# 894 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'funexpr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'tip) in
    Obj.repr(
# 181 "parser.mly"
                               ( InjR(_2, _4, location()) )
# 902 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 18 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 14 : string) in
    let _8 = (Parsing.peek_val __caml_parser_env 12 : 'tip) in
    let _11 = (Parsing.peek_val __caml_parser_env 9 : 'expr) in
    let _15 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _17 = (Parsing.peek_val __caml_parser_env 3 : 'tip) in
    let _20 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 185 "parser.mly"
                               ( Match(_2, Fun(_6, _8, _11, location()),
                                           Fun(_15, _17, _20, location()), 
                                           location()) )
# 917 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 189 "parser.mly"
                               ( parseError (location ()) )
# 923 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 193 "parser.mly"
                               ( Int (_1,location()) )
# 930 "parser.ml"
               : 'funexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 194 "parser.mly"
                               ( Float (_1,location()) )
# 937 "parser.ml"
               : 'funexpr))
; (fun __caml_parser_env ->
    Obj.repr(
# 195 "parser.mly"
                               ( Bool (true, location()) )
# 943 "parser.ml"
               : 'funexpr))
; (fun __caml_parser_env ->
    Obj.repr(
# 196 "parser.mly"
                               ( Bool (false, location()) )
# 949 "parser.ml"
               : 'funexpr))
; (fun __caml_parser_env ->
    Obj.repr(
# 197 "parser.mly"
                               ( Skip (location()) )
# 955 "parser.ml"
               : 'funexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 198 "parser.mly"
                               ( Var (_1,location()) )
# 962 "parser.ml"
               : 'funexpr))
; (fun __caml_parser_env ->
    Obj.repr(
# 199 "parser.mly"
                              ( IntOfFloat (location()) )
# 968 "parser.ml"
               : 'funexpr))
; (fun __caml_parser_env ->
    Obj.repr(
# 200 "parser.mly"
                             ( FloatOfInt (location()) )
# 974 "parser.ml"
               : 'funexpr))
; (fun __caml_parser_env ->
    Obj.repr(
# 201 "parser.mly"
                              ( Unbox (location()) )
# 980 "parser.ml"
               : 'funexpr))
; (fun __caml_parser_env ->
    Obj.repr(
# 202 "parser.mly"
               ( Fst (location()) )
# 986 "parser.ml"
               : 'funexpr))
; (fun __caml_parser_env ->
    Obj.repr(
# 203 "parser.mly"
               ( Snd(location())  )
# 992 "parser.ml"
               : 'funexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 204 "parser.mly"
                                 ( Pair(_2, _4, location()) )
# 1000 "parser.ml"
               : 'funexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 205 "parser.mly"
                               ( _2 )
# 1007 "parser.ml"
               : 'funexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 209 "parser.mly"
                               ( Deref (_2, location()) )
# 1014 "parser.ml"
               : 'funexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 210 "parser.mly"
                               ( Ref (_2, location()) )
# 1021 "parser.ml"
               : 'funexpr))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : ImpAST.expr)
